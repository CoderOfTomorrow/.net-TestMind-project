@page "/questions/{subcategoryId}"
@inject HttpClient HttpClient
@inject NavigationManager navManager
@attribute [Authorize]


<div class="container">
    @if (questionList.Count > 0)
    {
    <h5>@questionList[index].Name</h5>
    @foreach (var obj in questionList[index].Answers)
    {
        <div class="form-check">
            <input class="form-check-input" type="radio" name="answer" @onchange="@((ChangeEventArgs __e) => answerStatus=obj.Status)">
            <label class="form-check-label">
                @obj.Name
            </label>
        </div>
    }
        <button class="btn btn-info" @onclick=CheckAnswer>Submit</button>
        <button class="btn btn-danger" @onclick=NextQuestion>Next question</button>
        <br />
        if (questionStatus)
        {
            if (answerStatus) {
            <div class="alert alert-success" role="alert">
                Ai raspuns corect
            </div>
            }
            else
            {
            <div class="alert alert-danger" role="alert">
                Ai raspuns gresit
            </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public string subcategoryId { get; set; }

    private List<QuestionDto> questionList = new List<QuestionDto>();
    private int index = 0;
    private bool questionStatus;
    private bool answerStatus;
    Random random = new Random();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            questionList = await HttpClient.GetFromJsonAsync<List<QuestionDto>>($"api/question/{subcategoryId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public void CheckAnswer()
    {
        if (answerStatus)
            questionStatus = true;
        StateHasChanged();
    }

    public void NextQuestion()
    {
        if(index<questionList.Count)
            index++;
        StateHasChanged();
    }
}
